name: 'Setup Anchor'
description: 'Install Anchor, Solana CLI tools, and Node.js.'
branding:
  icon: anchor
  color: blue
inputs:
  node-version:
    description: 'Version of node.js to use'
    required: false
    default: '22.14.0'
  solana-cli-version:
    description: 'Version of Solana CLI to use'
    required: false
    default: '2.0.21'
  anchor-version:
    description: 'Version of Anchor to use'
    required: false
    default: '0.31.1'
  use-avm:
    description: 'Use Anchor Version Manager to install instead of npm'
    required: false
    default: "false"

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
    
    - name: Output Node Version
      id: node_v
      shell: bash
      run: |
        echo "node_v=$(node -v)" >> $GITHUB_OUTPUT
        echo "Using Node version: $(node -v)"
    
    - name: Setup Solana
      uses: heyAyushh/setup-solana@v5.9
      with:
        solana-cli-version: ${{ inputs.solana-cli-version }}
    
    - name: Verify Solana installation
      shell: bash
      run: |
        if ! command -v solana &> /dev/null; then
          echo "ERROR: Solana CLI installation failed"
          exit 1
        fi
        echo "Solana CLI version: $(solana --version)"
    
    # Generate a cache key that includes both versions and week number
    - name: Generate cache key
      id: cache-key
      shell: bash
      run: |
        echo "key=anchor-${{ runner.os }}-${{ inputs.anchor-version }}-node-${{ steps.node_v.outputs.node_v }}-solana-${{ inputs.solana-cli-version }}-$(date +%Y%V)" >> $GITHUB_OUTPUT
    
    # Cache Anchor specific items with version and week in key
    - uses: actions/cache@v4
      id: cache-anchor
      with:
        path: |
          ~/.cargo/bin/anchor
          ~/.avm
          /opt/hostedtoolcache/node
        key: anchor-${{ runner.os }}-${{ inputs.anchor-version }}-node-${{ steps.node_v.outputs.node_v }}-solana-${{ inputs.solana-cli-version }}-$(date +%Y%V)
    
    - name: Check for existing anchor installation
      id: check-anchor
      shell: bash
      run: |
        if command -v anchor &> /dev/null; then
          installed_version=$(anchor --version | awk '{print $2}')
          echo "anchor_exists=true" >> $GITHUB_OUTPUT
          echo "installed_version=$installed_version" >> $GITHUB_OUTPUT
          echo "Found existing Anchor installation: $installed_version"
        else
          echo "anchor_exists=false" >> $GITHUB_OUTPUT
          echo "No existing Anchor installation found"
        fi
    
    - name: Clean existing Anchor installation if version mismatch
      if: steps.check-anchor.outputs.anchor_exists == 'true' && steps.check-anchor.outputs.installed_version != inputs.anchor-version
      shell: bash
      run: |
        echo "Removing existing Anchor version to install requested version"
        rm -rf ~/.cargo/bin/anchor
        rm -rf ~/.avm
    
    - name: Install Anchor with NPM
      if: (steps.cache-anchor.outputs.cache-hit != 'true' && inputs.use-avm != 'true') || (steps.check-anchor.outputs.anchor_exists != 'true' && inputs.use-avm != 'true')
      shell: bash
      run: |
        echo "Installing Anchor v${{ inputs.anchor-version }} via npm..."
        npm i -g @coral-xyz/anchor-cli@${{ inputs.anchor-version }}
        
        if ! command -v anchor &> /dev/null; then
          echo "WARNING: NPM installation failed, falling back to cargo"
        else
          echo "NPM installation successful: $(anchor --version)"
        fi
    
    - name: Install Anchor with AVM
      if: (steps.cache-anchor.outputs.cache-hit != 'true' && (inputs.use-avm == 'true' || !success())) || (steps.check-anchor.outputs.anchor_exists != 'true' && (inputs.use-avm == 'true' || !success()))
      shell: bash
      run: |
        echo "Installing Anchor v${{ inputs.anchor-version }} via AVM..."
        cargo install --git https://github.com/coral-xyz/anchor avm --force
        avm install ${{ inputs.anchor-version }}
        avm use ${{ inputs.anchor-version }}
        
        if ! command -v anchor &> /dev/null; then
          echo "WARNING: AVM installation failed, falling back to direct cargo install"
        else
          echo "AVM installation successful: $(anchor --version)"
        fi
    
    - name: Install Anchor with Cargo
      if: steps.cache-anchor.outputs.cache-hit != 'true' && !success()
      shell: bash
      run: |
        echo "Installing Anchor v${{ inputs.anchor-version }} via Cargo directly..."
        cargo install --git https://github.com/coral-xyz/anchor --tag v${{ inputs.anchor-version }} anchor-cli --force
        
        if ! command -v anchor &> /dev/null; then
          echo "ERROR: All Anchor installation methods failed"
          exit 1
        else
          echo "Cargo installation successful: $(anchor --version)"
        fi
    
    - name: Verify Anchor installation
      shell: bash
      run: |
        if ! command -v anchor &> /dev/null; then
          echo "ERROR: Anchor installation verification failed"
          exit 1
        fi
        
        anchor_version=$(anchor --version)
        echo "Anchor installed successfully: $anchor_version"
        
        # Verify version matches requested version
        if [[ ! "$anchor_version" == *"${{ inputs.anchor-version }}"* ]]; then
          echo "WARNING: Installed version ($anchor_version) may not match requested version (${{ inputs.anchor-version }})"
        fi